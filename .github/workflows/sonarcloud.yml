# name: "sonar_cloud_scan_github_actions"
# on:
#   push:
#     branches: [ "main", "jesus_sonarqube" ]
#   workflow_dispatch:

# jobs:
#   DemoSonarCloudSCan:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#         with:
#             fetch-depth: 0
#       - name: SonarCloud Scan
#         uses: sonarsource/sonarcloud-github-action@master
#         env:
#             GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
#             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         with:
#           args: >
#               -Dsonar.organization=petcareapi
#               -Dsonar.projectKey=yisuslopez45_proyectoDDSII
#               -Dsonar.python.coverage.reportPaths=coverage.xml

name: "sonar_cloud_scan_github_actions"

on:
  push:
    branches: [ "main", "jesus_sonarqube" ]
  workflow_dispatch:

jobs:
  DemoSonarCloudScan:
    runs-on: ubuntu-latest


    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: gatitos
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
    
    env:
      DB_HOST: postgres  # Cambia esto a 'localhost' si es necesario

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        
      - name: Set environment variable for DB_HOST
        run: echo "DB_HOST=localhost" >> $GITHUB_ENV

      - name: Setting variable DB_HOST
        run: echo "DB_HOST=localhost" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h ${{ env.DB_HOST }} -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      # Configura Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # Ajusta según la versión que uses

      # Instala dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r petcareAPI/requirements.txt

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      # Ejecuta pruebas con cobertura
      - name: Run tests with coverage
        run: |
          cd petcareAPI
          pytest --cov=core --cov-report=xml test/

      # Ejecuta el análisis de SonarCloud
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
              -Dsonar.organization=petcareapi
              -Dsonar.projectKey=yisuslopez45_proyectoDDSII
              -Dsonar.python.coverage.reportPaths=petcareAPI/coverage.xml
